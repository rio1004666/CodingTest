"""
직육면체 블럭들을 빈틈없이 채우는것 n = 100만 (3차원 블럭채우기)
백준의 기초문제 다이나믹 프로그래밍 - 타일문제 (2차원)
테이블 정의
dp[i][0-4]
i,0 => i, 1x1x1 블럭을 깔금하게 채우는 경우의 수
i,1 =>
i,2
i.3
i,4

초깃값 dp[0][0] = 높이 0 = 1
 dp[1][0] = 높이 1 밑변 2x2 => 2가지
 A -> i-1까지 깔끔하게 잘쌓고 마지막 i번째 층을 쌓기
 dp[i-1][0] x 2 => 2가지가 가능하기때문에
 B -> i-2까지 깜끌하게 쌓고 마지막에 높이가 2인 블럭을 쌓는 경우
 dp[i-2][0] x 1
 C -> 여기에는 A와 B애서 한번도 등장하지 않은 경우이다
 i-1도 i-2도 안속한다
 dp[i][1] ( 2번째 인덱스는 블럭의 종류이다 )
 D,E,F는 dp[i][2]  dp[i][3] dp[i][4] 가 된다
 dp[i][0] = dp[i-1][0] * 2 + dp[i-2][0] + dp[i][1] + dp[i][2] + dp[i][3] + dp[i][4]
 dp[i][1] = dp[i-2][0] + dp[i-1][3] ( 두가지의 방법을 모두 더한다 )

"""

import sys

si = sys.stdin.readline
Q = int(si())
dp = [[0, 0, 0, 0, 0] for _ in range(1000001)]
MOD = 1000000007
dp[0][0] = 1
dp[1][0] = 2
for i in range(2, 1000001):
    dp[i][1] = dp[i - 2][0] + dp[i - 1][3]
    dp[i][2] = dp[i - 2][0] + dp[i - 1][4]
    dp[i][3] = dp[i - 2][0] + dp[i - 1][1]
    dp[i][4] = dp[i - 2][0] + dp[i - 1][2]
    dp[i][0] = dp[i - 1][0] * 2 + dp[i - 2][0] + dp[i][1] + dp[i][2] + dp[i][3] + dp[i][4]
    for j in range(5):
        dp[i][j] %= MOD
for _ in range(Q):
    n = int(si())
    print(dp[n][0])


